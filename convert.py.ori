# convert.py

import os
import pandas as pd
import datetime
from openpyxl import load_workbook
import win32com.client
from shutil import copyfile

import yg_fl     # append of openpyxl添加分类
import jjr_fl    # append of openpyxl添加分类
import sb_fl       # append of openpyxl添加分类
import gjj_fl      # append of openpyxl添加分类


class Convert:
    pass


def cshfl(zdr_bm, yyb_bm):  # 初始化分录
    today=datetime.date.today().strftime("%Y-%m-%d")
    kjfl = [                    # 会计分录
        None,                   # 0  A列
        yyb_bm + '-0002',       # 1  B列，核算账簿
        '01',                   # 2  C列，凭证类别编码
        zdr_bm,                 # 3  D列，制单人编码
        today,                  # 4  E列，制单日期
        None,                   # 5  F列，摘要
        None,                   # 6  G列，科目编码
        '人民币',                # 7  H列，币种
        None,                   # 8  I列，原币借方金额
        None,                   # 9  J列，本币借方金额
        yyb_bm,                 # 10 K列，业务单元编码
        None,                   # 11 L列，原币贷方金额
        None,                   # 12 M列，本币贷方金额
        today,                  # 13 N列，业务日期
        '1',                    # 14 O列，组织本币汇率
        None,                   # 15 P列，辅助核算1
        None,                   # 16 Q列，辅助核算2
    ]
    return kjfl


def create_dir_not_exist(path):
    if not os.path.exists(path):
        os.mkdir(path)

create_dir_not_exist("output\\")


def xls_win32save(xlfile):
    xlApp = win32com.client.Dispatch("Excel.Application")
    # 后台运行，不显示，不警告
    xlApp.Visible = False
    xlApp.DisplayAlerts = 0

    xlfile = os.path.abspath(xlfile)
    wb = xlApp.Workbooks.Open(xlfile)      # win32不认识相对路径，故需上一句转换为绝对路径。
    ws = wb.ActiveSheet

    wb.SaveAs(xlfile)
    # 关闭表格和excel对象
    wb.Close()
    xlApp.Quit()


def convert_yg(zdr_bm, yyb_bm, jbb_bm, in_df):
    out_xlfile = "output\\" + yyb_bm + "_yg.xlsx"
    copyfile("docs\\template.xlsx", out_xlfile)
    out_wb = load_workbook(out_xlfile)
    out_ws = out_wb.active

    # 获取字典的所有键
    # for k in yg_fl.dict_AB.keys():
    #    print(k)
    kmdm_col = in_df.columns
    # print(kmdm_col)
    kmdm_AB = yg_fl.dict_AB.keys()      # 字典dict键key列表
    # print(kmdm_AB)
    kmdm_D = yg_fl.dict_AB.keys()
    kmdm_Z = yg_fl.dict.keys()

    xj_list = [
        "22110103",                 # 补贴小计
        "221102",                   # 福利小计
        "22110104",                 # 提成小计
    ]

    bt_list = [              # 补贴列表
        "66011503",                 # 过节费
        "66011504",                 # 交通补贴
        "66011505",                 # 伙食补贴
        "66011506",                 # 通讯补贴
        "66011507",                 # 辞退福利
        "66011510",                 # 劳保补贴
        "66011519",                 # 其他补贴
    ]

    flf_list = [k for k in kmdm_AB if k[0:6] == "660116"]       # 在kmdm_AB列表中提取福利费科目代码列表
    tc_list = [k for k in kmdm_AB if k[0:8] == "66011508"]      # 在kmdm_AB列表中提取提成支出科目代码列表

    amt_a_bt = 0        #A类人员补贴、福利、提成小计金额
    amt_a_fl = 0
    amt_a_tc = 0

    amt_b_bt = 0        #B类人员补贴、福利、提成小计金额
    amt_b_fl = 0
    amt_b_tc = 0

    amt_d_bt = 0        #D类人员补贴、福利、提成小计金额
    amt_d_fl = 0
    amt_d_tc = 0

    if 'A小计' in in_df.index:
        # A类人员（员工）-01
        for k in kmdm_AB:                                           # 做账循序科目代码列表循环
            fl_list = cshfl(zdr_bm, yyb_bm)                         # 初始化分录各字段list列表
            if (k in kmdm_col):                                     # 做账循序科目代码列表元素是否在表头col(科目代码)中
                amount_A = in_df[k]['A小计']                         # 从左至右取每列/字段的最后一行的合计数据
                if (amount_A != 0) and (not (pd.isnull(amount_A))):
                    amount_A = round(in_df[k]['A小计'], 2)           # 对合计数据四舍五入，并转为字符型。

                    if k in bt_list:
                        amt_a_bt += amount_A
                    if k == '22110103':
                        amount_A = amt_a_bt

                    if k in flf_list:
                        amt_a_fl += amount_A
                    if k == '221102':
                        amount_A = amt_a_fl

                    if k in tc_list:
                        amt_a_tc += amount_A
                    if k == '22110104':
                        amount_A = amt_a_tc

                    yg_fl.switcher(yg_fl.dict_AB, k, fl_list, amount_A, '01:员工', jbb_bm, in_df, out_ws)

    if 'B小计' in in_df.index:
        # B类人员（全日制营销人员）-05
        for k in kmdm_AB:                                           # 做账循序科目代码列表循环
            fl_list = cshfl(zdr_bm, yyb_bm)                         # 初始化分录各字段list列表
            if k in kmdm_col:                                       # 做账循序科目代码列表元素是否在表头col(科目代码)中
                amount_B = in_df[k]['B小计']                         # 从左至右取每列/字段的最后一行的合计数据
                if (amount_B != 0) and (not (pd.isnull(amount_B))):
                    amount_B = round(in_df[k]['B小计'], 2)           # 对合计数据四舍五入，并转为字符型。

                    if k in bt_list:
                        amt_b_bt += amount_B
                    if k == '22110103':
                        amount_B = amt_b_bt

                    if k in flf_list:
                        amt_b_fl += amount_B
                    if k == '221102':
                        amount_B = amt_b_fl

                    if k in tc_list:
                        amt_b_tc += amount_B
                    if k == '22110104':
                        amount_B = amt_b_tc

                    yg_fl.switcher(yg_fl.dict_AB, k, fl_list, amount_B, '05:营销人员', jbb_bm, in_df, out_ws)

    if 'D小计' in in_df.index:
        # D类人员（实习生）-08
        for k in kmdm_D:                                            # 做账循序科目代码列表循环
            fl_list = cshfl(zdr_bm, yyb_bm)                         # 初始化分录各字段list列表
            if k in kmdm_col:                                       # 做账循序科目代码列表元素是否在表头col(科目代码)中
                amount_D = in_df[k]['D小计']                         # 从左至右取每列/字段的最后一行的合计数据
                if (amount_D != 0) and (not (pd.isnull(amount_D))):
                    amount_D = round(in_df[k]['D小计'], 2)           # 对合计数据四舍五入，并转为字符型。

                    if k in bt_list:
                        amt_d_bt += amount_D
                    if k == '22110103':
                        amount_D = amt_d_bt

                    if k in flf_list:
                        amt_d_fl += amount_D
                    if k == '221102':
                        amount_D = amt_d_fl

                    if k in tc_list:
                        amt_d_tc += amount_D
                    if k == '22110104':
                        amount_D = amt_d_tc

                    yg_fl.switcher(yg_fl.dict_D, k, fl_list, amount_D, '08:实习生', jbb_bm, in_df, out_ws)

    # 全部人员合计
    for k in kmdm_Z:                                                # 做账循序科目代码列表
        fl_list = cshfl(zdr_bm, yyb_bm)                             # 初始化分录各字段list列表
        if k in kmdm_col:                                           # 做账循序科目代码列表元素是否在表头col(科目代码)中
            amount = in_df[k]['合计']                                # 从左至右取每列/字段的最后一行的合计数据
            if (amount != 0) and (not (pd.isnull(amount))):
                amount = round(in_df[k]['合计'], 2)                  # 对合计数据四舍五入，并转为字符型。
                yg_fl.switcher(yg_fl.dict, k, fl_list, amount, '', jbb_bm, in_df, out_ws)

    out_wb.save(filename=out_xlfile)
    out_wb.close()
    xls_win32save(out_xlfile)

    # # https://stackoverflow.com/questions/56960564/how-do-i-format-an-entire-column-or-cells-i-can-iterate-thruas-text-format-usi
    # for row in out_ws.iter_rows(min_row=2):                      # min_row=2  从第2行开始，排除第1行。
    #     for cell in row:
    #         # only relevant column and without header
    #         # if cell.column_letter == 'D' and cell.row > 1:
    #         out_ws[cell.coordinate].number_format = '@'          # @ 文本格式
    #         # out_ws['A1'].number_format = 'General'             # General 格式


def convert_jjr(zdr_bm, yyb_bm, jbb_bm, in_df):
    out_xlfile = "output\\" + yyb_bm + "_jjr.xlsx"
    copyfile("docs\\template.xlsx", out_xlfile)
    out_wb = load_workbook(out_xlfile)
    out_ws = out_wb.active
    for k in in_df.columns:                           # col是列字段名(科目代码)
        fl_list = cshfl(zdr_bm, yyb_bm)               # 初始化分录各字段list列表
        amount = in_df[k]['合计']                      # 从左至右取每列/字段的最后一行的合计数据
        if (amount != 0) and (not (pd.isnull(amount))):
            amount = round(in_df[k]['合计'], 2)        # 对合计数据四舍五入，并转为字符型。
            jjr_fl.switcher(k, fl_list, amount, jbb_bm, in_df, out_ws)
            
    out_wb.save(filename=out_xlfile)
    out_wb.close()
    xls_win32save(out_xlfile)


def convert_sb(zdr_bm, yyb_bm, jbb_bm, in_df, dd_df):
    out_xlfile = "output\\" + yyb_bm + "_sb.xlsx"
    copyfile("docs\\template.xlsx", out_xlfile)
    out_wb = load_workbook(out_xlfile)
    out_ws = out_wb.active
    for k in in_df.columns:                                  # col是列字段名(科目代码)
        fl_list = cshfl(zdr_bm, yyb_bm)                        # 初始化分录各字段list列表
        amount = in_df[k]['成本数据']                          # 从左至右取每列/字段的最后一行的合计数据
        if (amount != 0) and (not (pd.isnull(amount))):
            amount = round(in_df[k]['成本数据'], 2)            # 对合计数据四舍五入，并转为字符型。
            sb_fl.switcher_1(k, fl_list, amount, jbb_bm, in_df, out_ws)
    for k in in_df.columns:                                   # col是列字段名(科目代码)
        fl_list = cshfl(zdr_bm, yyb_bm)                         # 初始化分录各字段list列表
        amount = in_df[k]['成本数据']                           # 从左至右取每列/字段的最后一行的合计数据
        if (amount != 0) and (not (pd.isnull(amount))):
            amount = round(in_df[k]['成本数据'], 2)             # 对合计数据四舍五入，并转为字符型。
            sb_fl.switcher_2(k, fl_list, amount, jbb_bm, in_df, out_ws)

    fl_list = cshfl(zdr_bm, yyb_bm)                           # 初始化分录各字段list列表
    sb_fl.km_ddsb(fl_list, dd_df, out_ws)
    fl_list = cshfl(zdr_bm, yyb_bm)                           # 初始化分录各字段list列表
    sb_fl.km660110(fl_list, in_df, out_ws)

    out_wb.save(filename=out_xlfile)
    out_wb.close()
    xls_win32save(out_xlfile)


def convert_gjj(zdr_bm, yyb_bm, jbb_bm, in_df, dd_df):
    out_xlfile = "output\\" + yyb_bm + "_gjj.xlsx"
    copyfile("docs\\template.xlsx", out_xlfile)
    out_wb = load_workbook(out_xlfile)
    out_ws = out_wb.active
    for k in in_df.columns:                                     # col是列字段名(科目代码)
        fl_list = cshfl(zdr_bm, yyb_bm)                         # 初始化分录各字段list列表
        amount = in_df[k]['成本数据']                             # 从左至右取每列/字段的最后一行的合计数据
        if (amount != 0) and (not (pd.isnull(amount))):
            amount = round(in_df[k]['成本数据'], 2)               # 对合计数据四舍五入，并转为字符型。
            gjj_fl.switcher(k, fl_list, amount, jbb_bm, in_df, out_ws)

    fl_list = cshfl(zdr_bm, yyb_bm)                             # 初始化分录各字段list列表
    gjj_fl.km_ddgjj(fl_list, dd_df, out_ws)
    fl_list = cshfl(zdr_bm, yyb_bm)                             # 初始化分录各字段list列表
    gjj_fl.km1001(fl_list, in_df, out_ws)

    out_wb.save(filename=out_xlfile)
    out_wb.close()
    xls_win32save(out_xlfile)


if __name__ == '__main__':
    pass
    # ZDR_bm = 'wms'
    # YYB_bm = '1245'
    # JBB_bm = '1101'
    # LBT_col = 4
    # HBT_idx = 4
    # Filename = ".\\docs\\yggz_2020年9月工资表明细-珠海营业部.xlsx"
    # convert_jjrgz(ZDR_bm, YYB_bm, JBB_bm, LBT_col, HBT_idx, Filename)
